namespace Training6;

//positional record based on struct => readonly seals the struct (not inheritable), struct makes it immutable
public readonly record struct DailyTemperature(double HighTemp, double LowTemp)
{
    //HighTemp & LowTemp are also init-only properties that will be generated by the compiler. Neat huh?

    public double Mean => (HighTemp + LowTemp) / 2.0;
}

public sealed class DailyTemperatureClass
{
    public double HighTemp { get; init; }
    public double LowTemp { get; init; }
    public double Mean => (HighTemp + LowTemp) / 2.0;
}

public abstract record DegreeDays(double BaseTemperature, IEnumerable<DailyTemperature> TempRecords);

public sealed record HeatingDegreeDays(double BaseTemperature, IEnumerable<DailyTemperature> TempRecords)
    : DegreeDays(BaseTemperature, TempRecords)
{
    public double DegreeDays => TempRecords.Where(s => s.Mean < BaseTemperature).Sum(s => BaseTemperature - s.Mean);
}

public sealed record CoolingDegreeDays(double BaseTemperature, IEnumerable<DailyTemperature> TempRecords)
    : DegreeDays(BaseTemperature, TempRecords)
{
    public double DegreeDays => TempRecords.Where(s => s.Mean > BaseTemperature).Sum(s => s.Mean - BaseTemperature);
}